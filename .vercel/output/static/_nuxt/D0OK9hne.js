import{R as V,Y as f,_ as $,e as q,c as x,o as F,a as R,O as A,Q as H,x as U,S as w,i as B,U as D,z,k as E,j as G,W as J,X as K,a1 as P,K as Q}from"#entry";import{t as W,u as X}from"./BMUa4Mus.js";import{a as Y}from"./BcwvcA4o.js";const u=V(f.ui.strategy,f.ui.textarea,W),L=q({inheritAttrs:!1,props:{modelValue:{type:[String,Number],default:""},id:{type:String,default:null},name:{type:String,default:null},placeholder:{type:String,default:null},required:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},rows:{type:Number,default:3},maxrows:{type:Number,default:0},autoresize:{type:Boolean,default:!1},autofocus:{type:Boolean,default:!1},autofocusDelay:{type:Number,default:100},resize:{type:Boolean,default:!1},padded:{type:Boolean,default:!0},size:{type:String,default:null,validator(e){return Object.keys(u.size).includes(e)}},color:{type:String,default:()=>u.default.color,validator(e){return[...f.ui.colors,...Object.keys(u.color)].includes(e)}},variant:{type:String,default:()=>u.default.variant,validator(e){return[...Object.keys(u.variant),...Object.values(u.color).flatMap(t=>Object.keys(t))].includes(e)}},textareaClass:{type:String,default:null},class:{type:[String,Object,Array],default:()=>""},ui:{type:Object,default:()=>({})},modelModifiers:{type:Object,default:()=>({})}},emits:["update:modelValue","blur","change"],setup(e,{emit:t}){const{ui:l,attrs:m}=X("textarea",w(e,"ui"),u,w(e,"class")),{emitFormBlur:c,emitFormInput:p,inputId:r,color:v,size:y,name:h}=Y(e,u),s=B(D({},e.modelModifiers,{trim:!1,lazy:!1,number:!1,nullify:!1})),o=B(null),g=()=>{e.autofocus&&o.value?.focus()},i=()=>{if(e.autoresize){if(!o.value)return;o.value.rows=e.rows;const a=o.value.style.overflow;o.value.style.overflow="hidden";const n=window.getComputedStyle(o.value),O=Number.parseInt(n.paddingTop),N=Number.parseInt(n.paddingBottom),k=O+N,M=Number.parseInt(n.lineHeight),{scrollHeight:T}=o.value,d=(T-k)/M;d>e.rows&&(o.value.rows=e.maxrows?Math.min(d,e.maxrows):d),o.value.style.overflow=a}},b=a=>{s.value.trim&&(a=a.trim()),s.value.number&&(a=P(a)),s.value.nullify&&(a||=null),t("update:modelValue",a),p()},C=a=>{i(),s.value.lazy||b(a.target.value)},I=a=>{const n=a.target.value;t("change",n),s.value.lazy&&b(n),s.value.trim&&(a.target.value=n.trim())},S=a=>{t("blur",a),c()};z(()=>{setTimeout(()=>{g()},e.autofocusDelay)}),E(()=>e.modelValue,()=>{Q(i)}),z(()=>{setTimeout(()=>{g(),i()},100)});const j=G(()=>{const a=l.value.color?.[v.value]?.[e.variant]||l.value.variant[e.variant];return J(K(l.value.base,l.value.form,l.value.rounded,l.value.placeholder,l.value.size[y.value],e.padded?l.value.padding[y.value]:"p-0",a?.replaceAll("{color}",v.value),!e.resize&&"resize-none"),e.textareaClass)});return{ui:l,attrs:m,name:h,inputId:r,textarea:o,textareaClass:j,onInput:C,onChange:I,onBlur:S}}}),Z=["id","value","name","rows","required","disabled","placeholder"];function _(e,t,l,m,c,p){return F(),x("div",{class:U(e.ui.wrapper)},[R("textarea",H({id:e.inputId,ref:"textarea",value:e.modelValue,name:e.name,rows:e.rows,required:e.required,disabled:e.disabled,placeholder:e.placeholder,class:e.textareaClass},e.attrs,{onInput:t[0]||(t[0]=(...r)=>e.onInput&&e.onInput(...r)),onBlur:t[1]||(t[1]=(...r)=>e.onBlur&&e.onBlur(...r)),onChange:t[2]||(t[2]=(...r)=>e.onChange&&e.onChange(...r))}),null,16,Z),A(e.$slots,"default")],2)}const le=Object.assign($(L,[["render",_]]),{__name:"UTextarea"});export{le as _};
